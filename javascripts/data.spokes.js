// Generated by CoffeeScript 1.3.1

/*
This file is part of SpokeDM.

SpokeDM is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SpokeDM is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public along with SpokeDM.  
If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var module;

  module = angular.module('SpokeData', []);

  module.factory('SPDataCache', function() {
    return {
      _cache: {},
      find: function(modelkey, key) {
        return this._cache[modelkey] && (!key || this._cache[modelkey][key]);
      },
      get: function(modelkey, key) {
        return this._cache[modelkey][key];
      },
      save: function(modelkey, key, data) {
        if (key === 'new') {
          return;
        }
        if (!this._cache[modelkey]) {
          this._cache[modelkey] = {};
        }
        return this._cache[modelkey][key] = angular.copy(data);
      },
      "delete": function(modelkey, key) {
        this.hasdelete = true;
        if (this._cache[modelkey] && this._cache[modelkey][key]) {
          return this._cache[modelkey][key] = 'delete';
        }
      }
    };
  });

  module.factory('SPLinkSpoke', function($resource, $rootScope) {
    var SPLinkSpoke;
    SPLinkSpoke = $resource(spokesLinkDataUrl + '/:modelkey/:key', {
      modelkey: '@modelkey',
      key: '@key',
      parent: '@parent'
    });
    SPLinkSpoke.prototype.get = function(cb) {
      var _this = this;
      return SPLinkSpoke.get(this, function(json) {
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (!(json.errors != null) || json.errors.length === 0) {
          angular.extend(_this, json);
          return typeof cb === "function" ? cb(json) : void 0;
        }
      });
    };
    return SPLinkSpoke;
  });

  module.factory('SPDataSpoke', function($resource, $rootScope, SPDataCache) {
    var SPDataSpoke;
    SPDataSpoke = $resource(spokesBaseDataUrl + '/:modelkey/:key', {
      modelkey: '@modelkey',
      key: '@key'
    }, {
      'get': {
        method: 'GET',
        params: {
          'delete': false
        }
      },
      'delete': {
        method: 'GET',
        params: {
          'delete': true
        }
      },
      'save': {
        method: 'POST'
      },
      'list': {
        method: 'GET',
        params: {
          'list': true
        }
      }
    });
    SPDataSpoke.prototype.get = function(cb) {
      var i, item, j, option, params, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      if (!(this.newmodelkey != null) && SPDataCache.find(this.modelkey, this.key)) {
        angular.extend(this, SPDataCache.get(this.modelkey, this.key));
        _ref = this.properties;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.type === 'dropdown') {
            if (item.value === "") {
              item.value = null;
            }
            _ref1 = item.listing;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              option = _ref1[_j];
              if (item.value.key === option.key) {
                item.value = option;
                break;
              }
            }
          }
        }
        if (SPDataCache.hasdelete) {
          for (i in this.associations.parents) {
            if (SPDataCache.find(this.associations.parents[i].modelkey, this.associations.parents[i].data[0].key && SPDataCache.get(this.associations.parents[i].modelkey, this.associations.parents[i].data[0].key === 'delete'))) {
              this.associations.parents.splice(i, 1);
            }
          }
          for (i in this.associations.children) {
            if (SPDataCache.find(this.associations.children[i].modelkey)) {
              for (j in this.associations.children[i].data) {
                if (SPDataCache.find(this.associations.children[i].data[j].modelkey, this.associations.children[i].data[j].key && SPDataCache.get(this.associations.children[i].modelkey, this.associations.children[i].data[j].key === 'delete'))) {
                  this.associations.children[i].data.splice(j, 1);
                }
              }
            }
          }
        }
        if (typeof cb === "function") {
          cb({});
        }
        return;
      }
      params = {
        modelkey: this.modelkey,
        key: this.key
      };
      if (this.newmodelkey != null) {
        params['newkey'] = this.newmodelkey;
      }
      return SPDataSpoke.get(params, function(json) {
        var i, item, j, option, _k, _l, _len2, _len3, _ref2, _ref3;
        if ((json.errors != null) && json.errors.length !== 0) {
          return $rootScope.$broadcast('spokeLoadError', json.errors);
        }
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (!(json.errors != null) || json.errors.length === 0) {
          if (json.properties) {
            _ref2 = json.properties;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              item = _ref2[_k];
              if (item.type === 'dropdown') {
                if (item.value === "") {
                  item.value = null;
                }
                _ref3 = item.listing;
                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                  option = _ref3[_l];
                  if (item.value === option.key) {
                    item.value = option;
                    break;
                  }
                }
              }
            }
            if (SPDataCache.hasdelete) {
              for (i in json.associations.parents) {
                if (SPDataCache.find(json.associations.parents[i].modelkey, json.associations.parents[i].data[0].key && SPDataCache.get(json.associations.parents[i].modelkey, json.associations.parents[i].data[0].key === 'delete'))) {
                  json.associations.parents.splice(i, 1);
                }
              }
              for (i in json.associations.children) {
                if (SPDataCache.find(json.associations.children[i].modelkey)) {
                  for (j in json.associations.children[i].data) {
                    if (SPDataCache.find(json.associations.children[i].data[j].modelkey, json.associations.children[i].data[j].key && SPDataCache.get(json.associations.children[i].modelkey, json.associations.children[i].data[j].key === 'delete'))) {
                      json.associations.children[i].data.splice(j, 1);
                    }
                  }
                }
              }
            }
          } else if (json.listing != null) {
            if (SPDataCache.hasdelete) {
              for (i in json.listing) {
                if (SPDataCache.find(json.modelkey, json.listing[i].key && SPDataCache.get(json.modelkey, json.listing[i].key === 'delete'))) {
                  json.listing.splice(i, 1);
                }
              }
            }
          }
          _this._invis = {};
          _this._originalinvis = {};
          _this._originalproperties = [];
          _this.associations = {};
          _this.errors = [];
          _this.properties = [];
          angular.extend(_this, json);
          _this._originalproperties = angular.copy(_this.properties);
          _this._originalinvis = angular.copy(_this._invis);
        }
        if (_this.key !== 'new' && !(json.listing != null)) {
          SPDataCache.save(_this.modelkey, _this.key, _this);
        }
        if (typeof cb === "function") {
          cb(json);
        }
      });
    };
    SPDataSpoke.prototype.save = function(cb) {
      var data, item, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3,
        _this = this;
      data = {
        data: {},
        origdata: {}
      };
      _ref = this.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        data.data[item.name] = item.type === 'dropdown' ? item.value.key : item.type === 'boolean' && item.value ? 1 : item.type === 'boolean' && !item.value ? 0 : item.value;
      }
      _ref1 = this._originalproperties;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        data.origdata[item.name] = item.type === 'dropdown' ? item.value.key : item.type === 'boolean' && item.value ? 1 : item.type === 'boolean' && !item.value ? 0 : item.value;
      }
      _ref2 = this._invis;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        item = _ref2[_k];
        data.data[item.name] = item.value;
      }
      _ref3 = this._originalinvis;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        item = _ref3[_l];
        data.origdata[item.name] = item.value;
      }
      if (this.dirtyforce) {
        data.dirtyforce = this.dirtyforce;
      }
      return SPDataSpoke.save({
        modelkey: this.modelkey,
        key: this.key
      }, data, function(json) {
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (json.dirtywarnings) {
          if (typeof cb === "function") {
            cb(json);
          }
          return;
        }
        if (!(json.errors != null) || json.errors.length === 0) {
          _this._originalproperties = angular.copy(_this.properties);
          _this._originalinvis = angular.copy(_this._invis);
          SPDataCache.save(_this.modelkey, _this.key, '');
          if (json.key != null) {
            _this.key = json.key;
          }
        }
        return typeof cb === "function" ? cb(json) : void 0;
      });
    };
    SPDataSpoke.prototype["delete"] = function(cb) {
      var _this = this;
      return SPDataSpoke["delete"]({
        modelkey: modelkey,
        key: this.key
      }, function(json) {
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (!(json.errors != null) || json.errors.length === 0) {
          SPDataCache["delete"](_this.modelkey, _this.key);
        }
        return typeof cb === "function" ? cb(json) : void 0;
      });
    };
    SPDataSpoke.prototype.list = function(params, cb) {
      var _this = this;
      return SPDataSpoke.list(params, function(json) {
        var i, option, prop, _i, _j, _len, _len1, _ref, _ref1;
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (!(json.errors != null) || json.errors.length === 0) {
          angular.extend(_this, json);
          for (i in _this.listing) {
            _this.listing[i].properties = [];
            _ref = _this.properties;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              prop = _ref[_i];
              _this.listing[i].properties.push(angular.extend({}, prop, {
                "value": _this.listing[i][prop.name]
              }));
              if (_this.listing[i].type === 'dropdown') {
                if (_this.listing[i].value === "") {
                  _this.listing[i].value = null;
                }
                _ref1 = _this.listing[i].listing;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  option = _ref1[_j];
                  if (object[item].value === option.key) {
                    object[item].value = option;
                    break;
                  }
                }
              }
            }
            _this.listing[i]._originalproperties = [];
            _this.listing[i]._originalproperties = angular.copy(_this.listing[i].properties);
          }
        }
        return typeof cb === "function" ? cb(json) : void 0;
      });
    };
    SPDataSpoke.prototype.isUnchanged = function() {
      return angular.equals(this._invis, this._originalinvis) && angular.equals(this.properties, this._originalproperties);
    };
    return SPDataSpoke;
  });

}).call(this);
