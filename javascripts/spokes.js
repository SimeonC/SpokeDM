// Generated by CoffeeScript 1.3.1

/*
This file is part of SpokeDM.

    SpokeDM is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SpokeDM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with SpokeDM.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var SpokeMain, module;

  module = angular.module('spokes', ['ngResource', 'SpokeUtilities']);

  module.factory('DataCache', function() {
    var DataCache;
    DataCache = {};
    DataCache.find = function(modelkey, key) {
      return this[modelkey] && (!key || this[modelkey][key]);
    };
    DataCache.get = function(modelkey, key) {
      return this[modelkey][key];
    };
    DataCache.save = function(modelkey, key, data) {
      if (!this[modelkey]) {
        this[modelkey] = {};
      }
      return this[modelkey][key] = data;
    };
    DataCache["delete"] = function(modelkey, key) {
      this.hasdelete = true;
      if (this[modelkey] && this[modelkey][key]) {
        return this[modelkey][key] = 'delete';
      }
    };
    return DataCache;
  });

  module.factory('DataSpoke', function($resource, $rootScope, DataCache) {
    var DataSpoke, processGet;
    DataSpoke = $resource(spokesBaseDataUrl + '/:modelkey/:key', {
      modelkey: '@modelkey',
      key: '@key'
    }, {
      'get': {
        method: 'GET',
        params: {
          'delete': false
        }
      },
      'delete': {
        method: 'GET',
        params: {
          'delete': true
        }
      },
      'save': {
        method: 'POST'
      },
      'list': {
        method: 'GET',
        params: {
          'list': true
        }
      }
    });
    processGet = function(json, self) {
      var i, item, j, option, _i, _j, _len, _len1, _ref, _ref1;
      if (json.loginerror != null) {
        $rootScope.broadcast("SpokeUserLoggedOut", json);
        return;
      }
      if (json.errors.length === 0) {
        if (json.properties) {
          _ref = json.properties;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.type === 'dropdown') {
              _ref1 = item.list;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                option = _ref1[_j];
                if (item.value === option.key) {
                  item.value = option;
                  break;
                }
              }
            }
          }
          if (DataCache.hasdelete) {
            for (i in json.associations.parents) {
              if (DataCache.find(json.associations.parents[i].modelkey, json.associations.parents[i].data[0].key && DataCache.get(json.associations.parents[i].modelkey, json.associations.parents[i].data[0].key === 'delete'))) {
                json.associations.parents.splice(i, 1);
              }
            }
            for (i in json.associations.children) {
              if (DataCache.find(json.associations.children[i].modelkey)) {
                for (j in json.associations.children[i].data) {
                  if (DataCache.find(json.associations.children[i].data[j].modelkey, json.associations.children[i].data[j].key && DataCache.get(json.associations.children[i].modelkey, json.associations.children[i].data[j].key === 'delete'))) {
                    json.associations.children[i].data.splice(j, 1);
                  }
                }
              }
            }
          }
        } else if (json.listing) {
          if (DataCache.hasdelete) {
            for (i in json.listing) {
              if (DataCache.find(json.modelkey, json.listing[i].key && DataCache.get(json.modelkey, json.listing[i].key === 'delete'))) {
                json.listing.splice(i, 1);
              }
            }
          }
        }
        angular.extend(self, json);
        self._originalproperties = angular.copy(self.properties);
      }
    };
    DataSpoke.prototype.get = function(cb) {
      var params, self;
      self = this;
      if (DataCache.find(this.modelkey, this.key)) {
        angular.extend(this, DataCache.get(this.modelkey, this.key));
        return;
      }
      params = {
        modelkey: this.modelkey,
        key: this.key
      };
      if (this.newmodelkey != null) {
        params.newkey = this.newmodelkey;
      }
      return DataSpoke.get(params, function(json) {
        if (json.errors.length !== 0) {
          return $rootScope.$broadcast('spokeLoadError', json.errors);
        }
        processGet(json, self);
        if (params.key !== 'new') {
          DataCache.save(self.modelkey, self.key, self);
        }
        if (typeof cb === "function") {
          cb(json);
        }
      });
    };
    DataSpoke.prototype.save = function(cb) {
      var data, item, self, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      self = this;
      data = {
        data: {},
        origdata: {}
      };
      _ref = this.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        data.data[item.name] = item.type === 'dropdown' ? item.value.key : item.type === 'boolean' && item.value ? 1 : item.type === 'boolean' && !item.value ? 0 : item.value;
      }
      _ref1 = this._originalproperties;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        data.origdata[item.name] = item.type === 'dropdown' ? item.value.key : item.type === 'boolean' && item.value ? 1 : item.type === 'boolean' && !item.value ? 0 : item.value;
      }
      if ((this._invis != null) && this._invis) {
        _ref2 = this._invis;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          item = _ref2[_k];
          data.data[item.name] = item.value;
          data.origdata[item.name] = item.value;
        }
      }
      if (this.dirtyforce) {
        data.dirtyforce = this.dirtyforce;
      }
      return DataSpoke.save({
        modelkey: this.modelkey,
        key: this.key
      }, data, function(json) {
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (json.dirtywarnings) {
          if (typeof cb === "function") {
            cb(json);
          }
          return;
        }
        if (json.errors.length === 0) {
          self._originalproperties = angular.copy(self.properties);
        }
        DataCache.save(self.modelkey, self.key, '');
        if (json.key != null) {
          self.key = json.key;
        }
        return typeof cb === "function" ? cb(json) : void 0;
      });
    };
    DataSpoke.prototype["delete"] = function(cb) {
      var self;
      self = this;
      return DataSpoke["delete"]({
        modelkey: this.modelkey,
        key: this.key
      }, function(json) {
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (json.errors.length === 0) {
          DataCache["delete"](self.modelkey, self.key);
        }
        return typeof cb === "function" ? cb(json) : void 0;
      });
    };
    DataSpoke.prototype.list = function(params, cb) {
      var self;
      self = this;
      return DataSpoke.list(params, function(json) {
        var col, i, option, _i, _j, _len, _len1, _ref, _ref1;
        if (json.loginerror != null) {
          $rootScope.broadcast("SpokeUserLoggedOut", json);
          return;
        }
        if (json.errors.length === 0) {
          angular.extend(self, json);
          for (i in self.list) {
            self.list[i].properties = [];
            _ref = self.columns;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              col = _ref[_i];
              self.list[i].properties.push(angular.extend({}, col, {
                "value": self.list[i][col.name]
              }));
              if (self.list[i].type === 'dropdown') {
                _ref1 = self.list[i].list;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  option = _ref1[_j];
                  if (object[item].value === option.key) {
                    object[item].value = option;
                    break;
                  }
                }
              }
            }
            self.list[i]._originalproperties = [];
            self.list[i]._originalproperties = angular.copy(self.list[i].properties);
          }
          return typeof cb === "function" ? cb(json) : void 0;
        }
      });
    };
    return DataSpoke;
  });

  module.config(function($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when(spokesBaseViewUrl + '/:modelkey/:key');
  });

  SpokeMain = (function() {

    SpokeMain.name = 'SpokeMain';

    function SpokeMain($scope, $route, $routeParams, $location, DataSpoke) {
      var typeSaveProcess;
      $scope.spoke = new DataSpoke();
      $scope.spoke.listing = [];
      $scope.spoke.properties = [];
      $scope.spoke.children = [];
      $scope.spoke.parents = [];
      $scope.alerts = [];
      $scope.geterrors = [];
      $scope.geterrorsplash = false;
      $scope.$on("spokeLoadError", function(evt, errors) {
        $scope.geterrors = errors;
        return $scope.geterrorsplash = true;
      });
      $scope.$on("$routeChangeSuccess", function() {
        $scope.geterrors = [];
        $scope.geterrorsplash = false;
        if ($routeParams.key === 'new' && ($scope.spoke.modelkey != null) && ($scope.spoke.key != null)) {
          $scope.spoke.newmodelkey = $routeParams.modelkey;
          if (($scope.spoke.modelkey != null) && ($scope.spoke.key != null) && ($routeParams.modelkey != null) && ($routeParams.key != null)) {
            return $scope.spoke.get(function(json) {
              if (json.errors.length === 0) {
                $scope.spoke.modelkey = $routeParams.modelkey;
                return $scope.spoke.key = $routeParams.key;
              }
            });
          }
        } else {
          $scope.spoke = new DataSpoke();
          $scope.spoke.modelkey = $routeParams.modelkey;
          $scope.spoke.key = $routeParams.key;
          if (($scope.spoke.modelkey != null) && ($scope.spoke.key != null) && ($routeParams.modelkey != null) && ($routeParams.key != null)) {
            return $scope.spoke.get();
          }
        }
      });
      $scope.clearAlerts = function() {
        return $scope.alerts = [];
      };
      $scope.removeAlert = function(index) {
        return $scope.alerts.splice(index, 1);
      };
      $scope.appendAlert = function(type, title, message) {
        return $scope.alerts.push({
          type: type,
          title: title,
          message: message
        });
      };
      $scope.dirtySave = function() {
        $scope.spoke.dirtyforce = true;
        return $scope.save();
      };
      $scope.save = function() {
        $scope.clearAlerts();
        $scope.spoke.save(function(json) {
          var error, _i, _len, _ref, _results;
          delete $scope.dirtywarnings;
          if (json.dirtywarnings) {
            $scope.dirtywarnings = json.dirtywarnings;
            return $scope.appendAlert('warning', 'Warning!', 'While saving we noticed another user has already saved changes to this object; Please check the changes and click "Force Save" if you wish to overwrite them');
          } else if (json.errors.length !== 0) {
            _ref = json.errors;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              error = _ref[_i];
              _results.push($scope.appendAlert('error', 'Error!', error.message));
            }
            return _results;
          } else if ($scope.spoke.key === 'new') {
            $scope.appendAlert('success', 'Saved!', 'The new ' + $scope.spoke.modelkey + ' was created successfully');
            $location.path(spokesBaseViewUrl + '/' + $scope.spoke.modelkey + '/' + json.key);
            return $location.replace();
          } else {
            return $scope.appendAlert('success', 'Saved!', 'The ' + $scope.spoke.modelkey + ' was saved successfully');
          }
        });
        return delete $scope.spoke.dirtyforce;
      };
      $scope.reset = function() {
        var item, option, _i, _len, _ref, _results;
        $scope.spoke.properties = angular.copy($scope.spoke._originalproperties);
        _ref = $scope.spoke.properties;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.type === 'dropdown') {
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = item.list;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                option = _ref1[_j];
                if (item.value.key === option.key) {
                  item.value = option;
                  break;
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
        }
        return _results;
      };
      $scope["delete"] = function() {
        return $scope.spoke["delete"](function(json) {
          $scope.clearAlerts();
          if (json.errors.length !== 0) {
            return $scope.appendAlert('error', 'Failed To Delete', 'The object failed to be deleted: ' + json.errors[0]);
          } else {
            $scope.appendAlert('success', 'Deleted Successfully', 'Please navigate to another page.');
            $scope.spoke.properties = [];
            $scope.spoke.associations.children = [];
            return $scope.spoke.permissions = 0;
          }
        });
      };
      $scope.isUnchanged = function() {
        return angular.equals($scope.spoke.properties, $scope.spoke._originalproperties);
      };
      $scope.expanderClass = function(item) {
        if ((item != null) && 'expanded' in item && item.expanded) {
          return "down";
        } else {
          return "right";
        }
      };
      $scope.expanderToggle = function(item) {
        return item.expanded = !((item.expanded != null) && item.expanded);
      };
      $scope.expand = function(item) {
        return (item != null) && 'expanded' in item && item.expanded;
      };
      $scope.createNew = function(childclass) {
        return $location.path(spokesBaseViewUrl + '/' + childclass.modelkey + '/new');
      };
      $scope.detailFocus = function(spoke, item, direction) {
        $scope.clearAlerts();
        return $location.path(spokesBaseViewUrl + '/' + spoke.modelkey + '/' + item.key);
      };
      $scope.extDynamicLink = function(baseurl, item) {
        if (!baseurl || baseurl === '') {
          return '';
        }
        if (item.key) {
          return baseurl.replace('spokekeyplaceholder', item.key);
        }
        return baseurl.replace('spokekeyplaceholder', '');
      };
      $scope.typeEditModal = function(typename) {
        $scope.typealert = '';
        $scope.edittype = new DataSpoke();
        $scope.edittype.modelkey = typename;
        return $scope.edittype.list({
          modelkey: typename,
          list: true
        }, function() {
          return $('#typeEditModal').modal('show');
        });
      };
      $scope.newEditType = function() {
        var column, data, _i, _len, _ref;
        $scope.typealert = '';
        data = {
          key: 'new',
          properties: []
        };
        _ref = $scope.edittype.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          column = _ref[_i];
          data.properties.push(angular.copy(column));
        }
        data._originalproperties = angular.copy(data.properties);
        return $scope.edittype.list.push(data);
      };
      $scope.dirtySaveType = function(type) {
        var dp;
        $scope.typealert = '';
        $scope.processingtype = type;
        dp = new DataSpoke();
        dp.dirtyforce = true;
        angular.extend(dp, type, {
          modelkey: $scope.edittype.modelkey
        });
        return dp.save(typeSaveProcess);
      };
      $scope.saveType = function(type) {
        var dp;
        $scope.typealert = '';
        $scope.processingtype = type;
        dp = new DataSpoke();
        angular.extend(dp, type, {
          modelkey: $scope.edittype.modelkey
        });
        return dp.save(typeSaveProcess);
      };
      typeSaveProcess = function(json) {
        var error, type, _i, _len, _ref, _results;
        type = $scope.processingtype;
        delete type.typewarnings;
        if (json.dirtywarnings) {
          return type.typewarnings = json.dirtywarnings;
        } else if (json.errors.length !== 0) {
          _ref = json.errors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            $scope.typealert = 'error';
            $scope.typealerttitle = 'Error!';
            _results.push($scope.typealertmessage = error.message);
          }
          return _results;
        } else if (type.key === 'new') {
          type._originalproperties = angular.copy(type.properties);
          $scope.resetType(type);
          $scope.typealert = 'success';
          $scope.typealerttitle = 'Saved!';
          $scope.typealertmessage = 'The new ' + $scope.edittype.modelkey + ' was created successfully';
          return type.key = json.key;
        } else {
          type._originalproperties = angular.copy(type.properties);
          $scope.resetType(type);
          $scope.typealert = 'success';
          $scope.typealerttitle = 'Saved!';
          return $scope.typealertmessage = 'The ' + $scope.edittype.modelkey + ' was saved successfully';
        }
      };
      $scope.resetType = function(type) {
        var item, option, _i, _len, _ref, _results;
        $scope.typealert = '';
        type.properties = angular.copy(type._originalproperties);
        _ref = type.properties;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.type === 'dropdown') {
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = item.list;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                option = _ref1[_j];
                if (item.value.key === option.key) {
                  item.value = option;
                  break;
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
        }
        return _results;
      };
      $scope.deleteType = function(type) {
        $scope.typealert = '';
        return DataSpoke["delete"]({
          modelkey: $scope.edittype.modelkey,
          key: type.key
        }, function(json) {
          var index;
          if (json.errors.length !== 0) {
            $scope.typealert = 'error';
            $scope.typealerttitle = 'Error';
            $scope.typealertmessage = 'The ' + $scope.edittype.modelkey + ' failed to delete, check that it is not referenced by any other objects.';
            return;
          }
          for (index in $scope.edittype.list) {
            if (!($scope.edittype.list[index] === type)) {
              continue;
            }
            $scope.edittype.list.splice(index, 1);
            break;
          }
          $scope.typealert = 'success';
          $scope.typealerttitle = 'Deleted!';
          $scope.typealertmessage = 'The ' + $scope.edittype.modelkey + ' was deleted successfully';
        });
      };
      $scope.isTypeUnchanged = function(type) {
        return angular.equals(type.properties, type._originalproperties);
      };
      $route.reload();
    }

    return SpokeMain;

  })();

  this.SpokeMain = SpokeMain;

}).call(this);
